version: '3.8'

services:
  # Backend API
  facepanel-api:
    build:
      context: ./api
      dockerfile: Dockerfile
    container_name: facepanel-api
    restart: unless-stopped
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=production
      - PORT=3000
      - JWT_SECRET=${JWT_SECRET:-your-super-secret-jwt-key-here}
      - SUPABASE_URL=${SUPABASE_URL:-}
      - SUPABASE_SERVICE_ROLE_KEY=${SUPABASE_SERVICE_ROLE_KEY:-}
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - ./api/logs:/app/logs
    networks:
      - facepanel-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Frontend
  facepanel-frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: facepanel-frontend
    restart: unless-stopped
    ports:
      - "8080:8080"
    depends_on:
      - facepanel-api
    networks:
      - facepanel-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: facepanel-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
      - ./nginx/logs:/var/log/nginx
    depends_on:
      - facepanel-api
      - facepanel-frontend
    networks:
      - facepanel-network

  # PostgreSQL Database (opcional)
  postgres:
    image: postgres:15-alpine
    container_name: facepanel-postgres
    restart: unless-stopped
    environment:
      - POSTGRES_DB=facepanel
      - POSTGRES_USER=facepanel
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-facepanel123}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./api/supabase/schema.sql:/docker-entrypoint-initdb.d/schema.sql:ro
    ports:
      - "5432:5432"
    networks:
      - facepanel-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U facepanel"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Redis Cache (opcional)
  redis:
    image: redis:7-alpine
    container_name: facepanel-redis
    restart: unless-stopped
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD:-redis123}
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    networks:
      - facepanel-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Portainer (opcional - para gerenciar containers)
  portainer:
    image: portainer/portainer-ce:latest
    container_name: facepanel-portainer
    restart: unless-stopped
    ports:
      - "9000:9000"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - portainer_data:/data
    networks:
      - facepanel-network

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  portainer_data:
    driver: local

networks:
  facepanel-network:
    driver: bridge
